<?php


/**
 * @file
 * This module allows node administrators to make nodes viewable by specific
 * 'access groups'. Each access group can contain any number of roles.
 * If a node is not assigned to any access groups, it will remain viewable by
 * all users.
 *
 * Database definition:
 * @code

CREATE TABLE simple_access_groups (
  gid int(10) NOT NULL default '0',
  name varchar(50) NOT NULL default '',
  weight int(3) NOT NULL default '0'
) TYPE=MyISAM;

CREATE TABLE simple_access_roles (
  gid int(10) NOT NULL default '0',
  rid int(10) NOT NULL default '0'
) TYPE=MyISAM;

 * @endcode
 *
 */

/**
 * Implementation of hook_help().
 */
function simple_access_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Provides simple hide/view access for nodes. After enabling this module and <strong>before disabling this module</strong>, visit %link to configure the database.', array('%link'=>l('admin/access/simple_access/setup', 'admin/access/simple_access/setup')));
    case 'admin/access/simple_access':
      return t('');
  }
}

function simple_access_menu($may_cache) {
  $access = user_access('manage simple access');
  if ($may_cache) {
    $items[] = array('path'=>'admin/access/simple_access', 'title'=>t('simple access'), 'access'=>$access, 'callback'=>'simple_access_page','type'=>MENU_LOCAL_TASK);
    $items[] = array('path'=>'admin/access/simple_access/list', 'title'=>t('list'),  'access'=>$access, 'type'=>MENU_DEFAULT_LOCAL_TASK, 'weight'=>-8);
    $items[] = array('path'=>'admin/access/simple_access/add', 'title'=>t('add group'), 'callback'=>'simple_access_group_form', 'access'=>$access, 'type'=>MENU_LOCAL_TASK, 'weight'=>-6);
    $items[] = array('path'=>'admin/access/simple_access/settings', 'title'=>t('settings'), 'callback'=>'simple_access_settings_page', 'access'=>$access, 'type'=>MENU_LOCAL_TASK, 'weight'=>-4);

    $items[] = array('path'=>'admin/node/simple_access', 'title'=>t('access'), 'access' => user_access('administer nodes'), 'callback'=>'simple_access_nodes', 'type'=>MENU_LOCAL_TASK, 'weight'=>2);
    $items[] = array('path'=>'admin/node/simple_access/view', 'title'=>t('view'), 'callback'=>'simple_access_nodes', 'access' => user_access('administer nodes'), 'type'=>MENU_DEFAULT_LOCAL_TASK, 'weight'=>-5);
    $items[] = array('path'=>'admin/node/simple_access/edit', 'title'=>t('edit'), 'callback'=>'simple_access_nodes', 'access' => user_access('administer nodes'), 'type'=>MENU_LOCAL_TASK, 'weight'=>-4);
    $items[] = array('path'=>'admin/node/simple_access/delete', 'title'=>t('delete'), 'callback'=>'simple_access_nodes', 'access' => user_access('administer nodes'), 'type'=>MENU_LOCAL_TASK, 'weight'=>-3);

  }
  else {
    $items[] = array('path'=>'admin/access/simple_access/setup', 'title'=>variable_get('simple_access_active', FALSE) ? t('deactivate') : t('setup'), 'callback'=>'simple_access_setup_page', 'access'=>$access, 'type'=>MENU_LOCAL_TASK, 'weight'=>8);

  }
  return $items;
}


/**
 * Implementation of hook_perm().
 *
 */
function simple_access_perm() {
  return array('manage simple access');
}

/**
 * Implementation of hook_node_grants().
 *
 *
 */
function simple_access_node_grants($account, $op) {
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('access content', $account)) {
        $grants[] = 0;
      }
    case 'update' :
    case 'delete' :
      if (isset($account->roles)) {
        $grants = array_merge( $grants, simple_access_groups_from_roles( array_keys($account->roles) ));
      }
    return array('simple_access' => $grants);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 */
function simple_access_nodeapi(&$node, $op, $arg = 0) {
  switch ($op) {
    case 'form admin':
      // We present the selection for who can view the node in the administrative
      // block, so users with the "administer nodes" permission can view and edit
      // the settings.
      if (variable_get('simple_access_active', FALSE)) {
        if (!isset($node->simple_access)) {
          // Load the grants from the database.
          $result = db_query('SELECT na.gid, na.grant_view, na.grant_update, na.grant_delete FROM {node_access} na WHERE na.nid = %d AND na.realm = \'simple_access\'', $node->nid);
          while($grant = db_fetch_object($result)) {
            if ($grant->grant_view) {
              $views[$grant->gid] = $grant->gid;
            }
            if ($grant->grant_update) {
              $updates[$grant->gid] = $grant->gid;
            }
            if ($grant->grant_delete) {
              $deletes[$grant->gid] = $grant->gid;
            }
          }
          /*
          if (isset($views[0])) {
            // The "public" grant was set.
            // is this used still?
            $node->simple_access = 0;
          }

          else {*/
            $node->simple_access = array('views'=>$views, 'updates'=>$update, 'deletes'=>$deletes);
          //}
        }
        $variable = variable_get('sa_display', array('view'));
        $options = simple_access_group_select();
        if (in_array('view', $variable)) {
          if ($options) {
            $form = form_checkboxes('', 'simple_access][view', $views, $options);
          }
          else {
            $form = t('No <a href="%url">access groups</a> have been defined', array('%url', url('admin/access/simple_access')));
          }
          $output .= form_group(t('Only viewable by'), $form, '<span style="font-size:xx-small">'.t('All unchecked = viewable by all.').'</span>');
        }
        if (in_array('update', $variable)) {
          if (isset($output)) {
            // kludgey, I know....
            // Drupal doesn't like to get back more than one item... so....
            $output .= '</div><div class="extra">';
          }
          if ($options) {
            $form = form_checkboxes('', 'simple_access][update', $updates, simple_access_group_select());
          }
          else {
            $form = t('No <a href="%url">access groups</a> have been defined', array('%url', url('admin/access/simple_access')));
          }
          $output .= form_group(t('Additionally editable by'), $form, '<span style="font-size:xx-small">'.t('All unchecked = normal behavior<br />(author and admins can edit).').'</span>');
        }
        if (in_array('delete', $variable)) {
          if (isset($output)) {
            // kludgey, I know....
            $output .= '</div><div class="extra">';
          }
          if ($options) {
            $form = form_checkboxes('', 'simple_access][delete', $deletes, simple_access_group_select());
          }
          else {
            $form = t('No <a href="%url">access groups</a> have been defined', array('%url', url('admin/access/simple_access')));
          }
          $output .= form_group(t('Additionally deletable by'), $form, '<span style="font-size:xx-small">'.t('All unchecked = normal behavior<br />(author and admins can delete).').'</span>');
        }
      }
      else {
        // module is enabled, but database hasn't been configured
        $output = form_group(t('Simple Access'), t('Simple Access needs to configure the database before use. Please go to %link to set it up.', array('%link'=>l('admin/access/simple_access/setup', 'admin/access/simple_access/setup'))));
      }
      return $output;
    case 'delete':
      // When a node is deleted, delete any relevant grants.
      db_query('DELETE FROM {node_access} WHERE nid = %d AND realm = \'simple_access\'', $node->nid);
      break;
    case 'insert':
    case 'update':
      // if user doesn't have administer nodes permission, then the simple_access
      // boxes weren't on the page... so don't parse what ain't there! (see 'else')
      if (user_access('administer nodes')) {
        // Clear out any existing grants for the node. Don't worry, we'll set them again.
        db_query('DELETE FROM {node_access} WHERE nid = %d AND realm = \'simple_access\'', $node->nid);
        $views = FALSE;
        // loop through simple_access arrays from page submission
        // $type is either 'view', 'update', or 'delete'
        foreach((array)$node->simple_access as $type => $array) {
          // loop through each checkbox of the group
          foreach((array)$array as $gid) {
            // make an array of all grants for node
            $grants[$gid][$type] = 1;
            if ($type == 'view') {
              // if we've gotten here, then one of the view boxes is checked so...
              $views = TRUE;
            }
          }
        }
        if (!$views) {
          // if no 'view' access groups are selected,
          // set public view grant for node
          $grants[0]['view'] = 1;
          // there may be modules that let the public edit and delete nodes, but this isn't one of 'em. So....
          $grants[0]['update'] = 0;
          $grants[0]['delete'] = 0;
        }

        // this next line is wrong! Where is $gid coming from?
        foreach($grants as $gid => $gidgrants) {
          db_query("INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (%d, %d, 'simple_access', %d, %d, %d)", $node->nid, $gid, $gidgrants['view'], $gidgrants['update'], $gidgrants['delete']);
        }
      }
      else {
        // the user is not an administrator
        // so does the node already have some access permissions?
        if (!db_result(db_query("SELECT nid FROM {node_access} WHERE nid = %d AND realm = 'simple_access'", $node->nid))) {
          // if not set it up for everyone to view...
          db_query("INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (%d, %d, 'simple_access', %d, %d, %d)", $node->nid, 0, 1, 0, 0);
        }
      }
      break;
  }
}

function simple_access_page($op = NULL, $gid = NULL) {
  if ($_POST['op'] == t('Submit')) {
    simple_access_save_group($_POST['edit']);
  }
  elseif ($_POST['edit']['confirm']) {
    simple_access_delete_group($_POST['edit']['gid']);
    drupal_goto('admin/access/simple_access');
    return;
  }
  switch ($op) {
    case 'delete':
      $hidden = form_hidden('gid', $gid);
      $output = theme('confirm', t('Are you sure you want to delete this group?'), 'admin/access/simple_access', NULL, NULL, NULL, $hidden);
      break;
    case 'edit':
      return simple_access_group_form($gid);
      break;
    default:
      if (!variable_get('simple_access_active', FALSE)) {
        drupal_set_message(t('Fire it up first.'));
        drupal_goto('admin/access/simple_access/setup');
      }
      if (count($rg = simple_access_get_groups())) {
        drupal_set_title(t('Access Groups'));
        $header = array(t('Group'), t('Roles'), t('Operations'));
        $roles = user_roles();
        foreach ($rg as $g) {
          $gid = $g['gid'];
          $rows[$gid]['group'] = $g['name'];
          $r = array();
          foreach($g['roles'] as $rid) {
            $r[] = $roles[$rid];
          }
          $rows[$gid]['roles'] = "<span style='font-size:xx-small'>".implode(', ', $r)."</span>";
          $rows[$gid]['ops'] = l('edit', 'admin/access/simple_access/edit/'.$gid). '&nbsp;'. l('delete', 'admin/access/simple_access/delete/'.$gid);
        }
        $output .= theme('table', $header, $rows, array('style'=>'width:100%'));
        $output .= '<br />'.l(t('add another access group'), 'admin/access/simple_access/add');


      }
      else {
        drupal_set_message(t('You have not yet defined any access groups.'));
        drupal_goto('admin/access/simple_access/add');
      }
  }
  print theme('page', $output);
}

function simple_access_settings_page() {
  drupal_set_title(t('Simple Access Settings'));
  if ($_POST['op'] == t('Save Options')) {
    variable_set('sa_display', $_POST['edit']['sa_display']);
    drupal_set_message(t('Options saved'));
  }
  $options = array(
    'view' => t('<strong>View</strong>: Displays viewability selections at top of node form. Selected access groups will be the only users who can view the node. All unselected = normal node behavior (viewable by all).<br />'),
    'update' => t('<strong>Edit</strong>: Displays editability selections at top of node form. Users who are part of selected access groups will be able to edit this node. All unselected = "normal" node behavior (only author and admins may edit).<br />'),
    'delete' => t('<strong>Delete</strong>: Displays deleteability selections at top of node form. Users who are part of selected access groups will be able to delete this node. All unselected = "normal" node behavior (only author and admins may delete).<br />')
  );
  $form .= form_checkboxes(t('Display'), 'sa_display', variable_get('sa_display', array('view')), $options, t('Which options should appear on node add/edit pages for administrators? Select at least one.'), NULL, TRUE);
  $form .= form_submit(t('Save Options'));
  $output .= form($form);
  print theme('page', $output);
}

function simple_access_setup_page() {
  if ($_POST['op'] == t('Setup Database')) {
    simple_access_initialize(TRUE);
    drupal_goto('admin/access/simple_access');
  }
  elseif ($_POST['op'] == t('Deactivate')) {
    print theme('page', theme('confirm', t('Are you sure you want to deactivate the module?<br />All nodes will become viewable by everyone.'), 'admin/access/simple_access'));
  }
  elseif ($_POST['edit']['confirm']) {
    simple_access_initialize(FALSE);
  }
  if (!variable_get('simple_access_active', FALSE)) {
    drupal_set_title(t('Setup Database for Simple Access'));
    $group = t("<p>In order to activate simple_access, the database needs to be configured.</p><p>Click this button to get things going.</p>");
    $group .= form_submit(t('Setup Database'));
    $output = form(form_group('', $group));
  }
  else {
    drupal_set_title(t('Deactivate Simple Access'));
    $group = t("<p>Before deactivating simple_access.module, you'll need to click this button in order to remove the simple_access grants from the database. If you do not do this, all of your nodes will become invisible to anyone but administators when you deactivate the module.</p><p><strong>Do this only when you want to deactivate the module.</strong></p>");
    $group .= form_submit(t('Deactivate'));
    $output .= form(form_group('', $group));
  }
  print theme('page', $output);
}


function simple_access_group_form($gid = NULL) {
  if ($gid) {
    drupal_set_title(t('Edit Access Group'));
    $group = db_fetch_object(db_query('SELECT name, weight FROM {simple_access_groups} WHERE gid = %d', $gid));
    $name = $group->name;
    $weight = $group->weight;
    $roles = simple_access_get_roles($gid);
    $form .= form_hidden('gid', $gid);
  }
  else {
    drupal_set_title(t('Create Access Group'));
  }
  $form .= form_textfield(t('Name'), 'name', $name, 40, 80, t('The name for the access group as it will appear on the content editing form.'), $attributes = NULL, TRUE);
  $form .= form_checkboxes(t('Roles'), 'roles', $roles, user_roles(),   t('Roles that can view'));
  $form .= form_weight('Weight', 'weight', $weight, 10, t('When setting permissions, heavier names will sink and lighter names will be positioned nearer the top.'));
  $form .= ($gid) ? form_submit(t('Submit')) : form_submit(t('Submit'));
  $output = form($form, 'post', url('admin/access/simple_access'));
  print theme('page', $output);
}

function simple_access_get_roles($gid) {
  $roles = array();
  $sql = db_query('SELECT rid FROM {simple_access_roles} WHERE gid = %d', $gid);
  while ($row = db_fetch_object($sql)) {
    $roles[] = $row->rid;
  }
  return $roles;
}

function simple_access_get_groups() {
  $groups = array();
  $sql = db_query('SELECT gid, name FROM {simple_access_groups} ORDER BY weight, name');
  while ($g = db_fetch_object($sql)) {
    $groups[$g->gid]['name'] = $g->name;
    $groups[$g->gid]['gid'] = $g->gid;
    $groups[$g->gid]['roles'] = simple_access_get_roles($g->gid);
  }
  return $groups;
}

function simple_access_group_select() {
  $groups = array();
  $sql = db_query('SELECT gid, name FROM {simple_access_groups} ORDER BY weight, name');
  while ($g = db_fetch_object($sql)) {
    $groups[$g->gid] = $g->name;
  }
  return $groups;
}

/**
  * Get a list of group/grant ids based on a list of user roles
  * $roles should be a linear list a role ids
  *
  */

function simple_access_groups_from_roles($roles) {
  // there probably should be some 'static' stuff going on here
  $gids = array();
  $sql = db_query("SELECT gid FROM {simple_access_roles} WHERE rid IN (%s)", implode(",", $roles));
  while ($g = db_fetch_object($sql)) {
    $gids[] = $g->gid;
  }
  return $gids;
}

/**
  * Save group of roles into the database
  * $roles is an associative array of roles where the keys are role ids
  * $name is the name of the group
  * $gid is the group id
  *
  */

function simple_access_save_group($edit) {
  if (!$edit['gid']) {
    $edit['gid'] = db_next_id('simple_access_gid');
  }
  db_query('DELETE FROM {simple_access_roles} WHERE gid = %d', $edit['gid']);
  db_query('DELETE FROM {simple_access_groups} WHERE gid = %d', $edit['gid']);
  $success = TRUE;
  $success = $success && db_query("INSERT INTO {simple_access_groups} (gid, name, weight) VALUES (%d, '%s', %d)", $edit['gid'], $edit['name'], $edit['weight']);
  if (is_array($edit['roles'])) {
    foreach($edit['roles'] as $key=>$value) {
      $success = $success && db_query('INSERT INTO {simple_access_roles} (rid, gid) VALUES (%d, %d)', $value, $edit['gid']);
    }
  }
  if (!$success) {
    drupal_set_message(t("There was a problem saving to the database"));
  }
  return $success;
}

function simple_access_delete_group($gid) {
  db_query('DELETE FROM {simple_access_roles} WHERE gid = %d', $gid);
  db_query('DELETE FROM {simple_access_groups} WHERE gid = %d', $gid);
}

function simple_access_initialize($initialize = TRUE) {
  if ($initialize) {
    // delete universal view grant
    db_query('DELETE FROM {node_access} WHERE nid = 0 AND realm = "all"');
    // set all nodes to viewable
    db_query("INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) SELECT nid, 0, 'simple_access', 1, 0, 0 FROM {node}");
    variable_set('simple_access_active', TRUE);
    drupal_set_message(t('The database has been configured and simple_access module is ready for use.'));
  }
  else {
    // delete all simple_access stuff
    db_query('DELETE FROM {node_access} WHERE realm = "simple_access"');
    // re-enable universal view grant
    db_query('INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (0, 0, "all", 1, 0, 0)');
    variable_set('simple_access_active', FALSE);
    drupal_set_message(t('The database has been re-configured. You should now visit %modules to disable the simple_access module itself.', array('%modules', l('the modules page', 'admin/modules'))));
  }
}


/**
  * List hidden, editable, and deletable nodes
  *
  */

function simple_access_nodes() {
  switch(arg(3)) {
    case 'edit' :
      drupal_set_title(t('Items With Edit Access Set'));
      $output = '<div>'.t('These nodes have been set as "additionally editable by" certain Simple Access <a href="$url">groups</a>. ', array('%url' => url('admin/access/simple_access'))).'</div><br />';
      $sql = 'SELECT DISTINCT n.title, na.nid FROM {node} n INNER JOIN {node_access} na ON n.nid = na.nid WHERE na.realm="simple_access" AND na.gid > 0 AND na.grant_update = 1';
      break;
    case 'delete' :
      drupal_set_title(t('Items With Delete Access Set'));
      $output = '<div>'.t('These nodes have been set as "additionally deletable by" certain Simple Access <a href="%url">groups</a>. ', array('%url' => url('admin/access/simple_access'))).'</div><br />';
      $sql = 'SELECT DISTINCT n.title, na.nid FROM {node} n INNER JOIN {node_access} na ON n.nid = na.nid WHERE na.realm="simple_access" AND na.gid > 0 AND na.grant_delete = 1';
      break;
    case 'view' :
    default :
      drupal_set_title(t('Items With View Access Set'));
      $output = '<div>'.t('These nodes have been set as "only viewable by" certain Simple Access <a href="%url">groups</a>.', array('%url' => url('admin/access/simple_access'))).'</div><br />';
      $sql = 'SELECT DISTINCT n.title, na.nid FROM {node} n INNER JOIN {node_access} na ON n.nid = na.nid WHERE na.realm="simple_access" AND na.gid > 0 AND na.grant_view = 1';
      break;
  }
  $header = array(
    array('data' => t('ID'), 'field' => 'n.nid', 'sort' => 'desc'),
    array('data' => t('Title'), 'field' => 'n.title'),
    array('data' => '&nbsp;')
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 50);
  $groups_info = simple_access_get_groups();
  while ($r = db_fetch_object($result)) {
    $groups = array();
    $rs2 = db_query('SELECT na.gid, na.grant_view, na.grant_update, na.grant_delete FROM {node_access} na WHERE na.nid = %d AND na.realm = \'simple_access\'', $r->nid);
    while ($r2 = db_fetch_object($rs2)) {
      $groups[] = $groups_info[$r2->gid]['name'];
    }
    $rows[$r->nid]['nid'] = array('data' => $r->nid, 'style' => 'vertical-align:top');
    $info = '<div>'.$r->title.'</div><div style="font-size:xx-small">'.implode(', ', $groups).'</div>';
    $rows[$r->nid]['title'] = array('data' => $info, 'style' => 'vertical-align:top');
    $rows[$r->nid]['ops'] = array('data' => l(t('view'), 'node/'.$r->nid).' '.l(t('edit'), 'node/'.$r->nid.'/edit', array(), drupal_get_destination()), 'style' => 'vertical-align:top');
  }
  if ($rows) {
    $output .= theme('table', $header, $rows, array('style' => 'width:100%'));
    $output .= theme('pager', array(), 50);
  }
  else {
    $output .= '<div>'.t('No nodes match this criteria.').'</div>';
  }
  print theme('page', $output);
}


?>